name: Infrastructure Deployment

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
  # Allow manual trigger
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  APP_NAME: mickey-app
  REPOSITORY: mickey-app-repo
  TF_STATE_BUCKET: ${{ secrets.GCP_PROJECT_ID }}-terraform-state
  TF_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}

jobs:
  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authentication via credentials json
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Configure Docker to use gcloud credentials
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      # Format Terraform files
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform

      # Check if terraform state bucket exists
      - name: Check Terraform State Bucket
        id: check_bucket
        run: |
          if gsutil ls -p ${{ env.PROJECT_ID }} gs://${{ env.TF_STATE_BUCKET }} 2>/dev/null; then
            echo "bucket_exists=true" >> $GITHUB_OUTPUT
          else
            echo "bucket_exists=false" >> $GITHUB_OUTPUT
          fi

      # Bootstrap Terraform (Create State Bucket if it doesn't exist)
      - name: Bootstrap Terraform
        if: steps.check_bucket.outputs.bucket_exists == 'false'
        working-directory: ./terraform/bootstrap
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="tf_service_account_email=${{ env.TF_SA_EMAIL }}"

      # Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform/infrastructure
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state"

      # Validate Terraform configuration
      - name: Terraform Validate
        working-directory: ./terraform/infrastructure
        run: |
          terraform validate

      # Plan Terraform changes
      - name: Terraform Plan
        working-directory: ./terraform/infrastructure
        run: |
          terraform plan \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="app_name=${{ env.APP_NAME }}" \
            -var="repository_name=${{ env.REPOSITORY }}"

      # Apply Terraform to create infrastructure (only on main branch)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ./terraform/infrastructure
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="app_name=${{ env.APP_NAME }}" \
            -var="repository_name=${{ env.REPOSITORY }}"
