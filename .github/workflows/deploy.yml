name: Build and Deploy to Cloud Run

on:
  push: &deployment_trigger
    branches: [main]
    paths:
      - "src/**"
      - "package.json"
      - "package-lock.json"
      - ".npmrc"
      - "next.config.js"
      - "tsconfig.json"
      - "Dockerfile"
      - ".dockerignore"
      - "public/**"
      - ".github/workflows/deploy.yml"
  pull_request: *deployment_trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  APP_NAME: mickey-app
  REPOSITORY: mickey-app-repo
  TF_STATE_BUCKET: ${{ secrets.GCP_PROJECT_ID }}-terraform-state
  TF_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}

jobs:
  check-infrastructure:
    name: Check Infrastructure Status
    runs-on: ubuntu-latest
    steps:
      - name: Wait for infrastructure workflow
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: "Infrastructure Deployment" # This is the job name from infrastructure.yml
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Typecheck
        run: npm run typecheck

      - name: Run ESLint
        run: npm run lint

  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authentication via credentials json
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Configure Docker to use gcloud credentials
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      # Format Terraform files
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform

      # Check if terraform state bucket exists
      - name: Check Terraform State Bucket
        id: check_bucket
        run: |
          if gsutil ls -p ${{ env.PROJECT_ID }} gs://${{ env.TF_STATE_BUCKET }} 2>/dev/null; then
            echo "bucket_exists=true" >> $GITHUB_OUTPUT
          else
            echo "bucket_exists=false" >> $GITHUB_OUTPUT
          fi

      # Build the Docker image
      - name: Build
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.APP_NAME }}:${{ github.sha }} .

      # Push the Docker image to Artifact Registry
      - name: Push
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.APP_NAME }}:${{ github.sha }}

      # Update the Cloud Run service with the new image
      - name: Update Cloud Run service
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ./terraform/infrastructure
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="app_name=${{ env.APP_NAME }}" \
            -var="repository_name=${{ env.REPOSITORY }}" \
            -var="container_image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.APP_NAME }}:${{ github.sha }}"

      # Output the Cloud Run URL
      - name: Output Cloud Run URL
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ./terraform/infrastructure
        run: |
          echo "Cloud Run URL: $(terraform output -raw cloud_run_url)"
          echo "Custom Domain: $(terraform output -raw custom_domain_url || echo 'Not configured')"
