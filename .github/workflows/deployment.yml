name: Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allow manual trigger
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  APP_NAME: mickey-app
  REPOSITORY: mickey-app-repo
  TF_STATE_BUCKET: ${{ secrets.GCP_PROJECT_ID }}-terraform-state
  TF_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
  DOCKER_IMAGE_BASE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mickey-app-repo/mickey-app

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      infra_changed: ${{ steps.filter.outputs.infra }}
      code_changed: ${{ steps.filter.outputs.code }}
      workflows_changed: ${{ steps.filter.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            infra:
              - 'terraform/**'
            workflows:
              - '.github/workflows/**'
            code:
              - 'src/**'
              - 'package.json'
              - 'next.config.js'
              - 'tsconfig.json'
              - 'Dockerfile'
              - '.dockerignore'
              - 'public/**'
        continue-on-error: false

      - name: Log change detection
        run: |
          echo "Infra changed: ${{ steps.filter.outputs.infra }}"
          echo "Code changed:  ${{ steps.filter.outputs.code }}"
          echo "Workflows changed:  ${{ steps.filter.outputs.workflows }}"

  build-preview:
    name: Build Preview
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm install lightningcss && npm ci --force && npm rebuild --platform=linux --arch=x64

      - name: Run Build
        run: npm run build

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [detect-changes, build-preview]
    if: |
      needs.detect-changes.outputs.code_changed == 'true' && (
        needs.detect-changes.outputs.infra_changed == 'false' ||
        needs.detect-changes.outputs.workflows_changed == 'true'
      ) &&
      github.ref == 'refs/heads/main' &&
      github.event_name != 'pull_request'

    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - uses: actions/checkout@v4

      - name: Setup GCP/TF Env
        uses: ./.github/actions/setup-cloud-env
        with:
          project_id: ${{ env.PROJECT_ID }}
          region: ${{ env.REGION }}
          gcp_sa_key: ${{ secrets.GCP_SA_KEY }}

      - name: Build & Deploy App
        uses: ./.github/actions/deploy-container
        with:
          docker_image_base: ${{ env.DOCKER_IMAGE_BASE }}
          image_tag: ${{ github.sha }}
          tf_state_bucket: ${{ env.TF_STATE_BUCKET }}
          project_id: ${{ env.PROJECT_ID }}
          region: ${{ env.REGION }}
          app_name: ${{ env.APP_NAME }}
          repository: ${{ env.REPOSITORY }}

  iac:
    name: Terraform
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.infra_changed == 'true' && (
        needs.detect-changes.outputs.code_changed == 'false' ||
        needs.detect-changes.outputs.workflows_changed == 'true' 
      )

    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - uses: actions/checkout@v4

      - name: Setup GCP/TF Env
        uses: ./.github/actions/setup-cloud-env
        with:
          project_id: ${{ env.PROJECT_ID }}
          region: ${{ env.REGION }}
          gcp_sa_key: ${{ secrets.GCP_SA_KEY }}

      # Check if terraform state bucket exists
      - name: Check Terraform State Bucket
        id: check_bucket
        run: |
          if gsutil ls -p ${{ env.PROJECT_ID }} gs://${{ env.TF_STATE_BUCKET }} 2>/dev/null; then
            echo "bucket_exists=true" >> $GITHUB_OUTPUT
          else
            echo "bucket_exists=false" >> $GITHUB_OUTPUT
          fi

      # Bootstrap Terraform (Create State Bucket if it doesn't exist)
      - name: Bootstrap Terraform
        if: steps.check_bucket.outputs.bucket_exists == 'false'
        working-directory: ./terraform/bootstrap
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="tf_service_account_email=${{ env.TF_SA_EMAIL }}"

      # Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform/infrastructure
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state"

      # Validate Terraform configuration
      - name: Terraform Validate
        working-directory: ./terraform/infrastructure
        run: |
          terraform validate

      # Plan Terraform changes
      - name: Terraform Plan
        working-directory: ./terraform/infrastructure
        run: |
          terraform plan \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="app_name=${{ env.APP_NAME }}" \
            -var="repository_name=${{ env.REPOSITORY }}" \
            -var="container_image=${{ env.DOCKER_IMAGE_BASE }}:latest"

      # Apply Terraform to create infrastructure (only on main branch)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ./terraform/infrastructure
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="app_name=${{ env.APP_NAME }}" \
            -var="repository_name=${{ env.REPOSITORY }}" \
            -var="container_image=${{ env.DOCKER_IMAGE_BASE }}:latest"

  build-after-iac:
    name: Build After IAC
    runs-on: ubuntu-latest
    needs: [detect-changes, build-preview, iac]
    if: |
      needs.detect-changes.outputs.code_changed == 'true' &&
      needs.detect-changes.outputs.infra_changed == 'true' &&
      needs.iac.result == 'success' &&
      github.ref == 'refs/heads/main' &&
      github.event_name != 'pull_request'

    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - uses: actions/checkout@v4

      - name: Setup GCP/TF Env
        uses: ./.github/actions/setup-cloud-env
        with:
          project_id: ${{ env.PROJECT_ID }}
          region: ${{ env.REGION }}
          gcp_sa_key: ${{ secrets.GCP_SA_KEY }}

      - name: Build & Deploy App
        uses: ./.github/actions/deploy-container
        with:
          docker_image_base: ${{ env.DOCKER_IMAGE_BASE }}
          image_tag: ${{ github.sha }}
          tf_state_bucket: ${{ env.TF_STATE_BUCKET }}
          project_id: ${{ env.PROJECT_ID }}
          region: ${{ env.REGION }}
          app_name: ${{ env.APP_NAME }}
          repository: ${{ env.REPOSITORY }}
